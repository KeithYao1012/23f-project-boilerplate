DROP SCHEMA IF EXISTS spotigram;
CREATE SCHEMA IF NOT EXISTS spotigram;
USE spotigram;
CREATE TABLE IF NOT EXISTS Users(
    UserID integer AUTO_INCREMENT PRIMARY KEY,
    Username VARCHAR(50) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS Curator(
    CuratorID integer AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(50) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS Curator_Post(
    PostID integer AUTO_INCREMENT PRIMARY KEY,
    Creation_Date datetime DEFAULT CURRENT_TIMESTAMP,
    Post_Content VARCHAR(300) NOT NULL,
    CuratorID int not null,
    FOREIGN KEY (CuratorID) REFERENCES Curator(CuratorID) ON UPDATE RESTRICT ON DELETE RESTRICT
);
CREATE TABLE IF NOT EXISTS Artists(
    ArtistID INTEGER AUTO_INCREMENT PRIMARY KEY,
    Artist_Name VARCHAR(50) NOT NULL
);
CREATE TABLE IF NOT EXISTS Artist_Post(
    PostID INTEGER AUTO_INCREMENT PRIMARY KEY,
    ArtistID INTEGER NOT NULL,
    Creation_Date datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
    Content VARCHAR(300) NOT NULL,
    FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Genre(
    GenreID INTEGER AUTO_INCREMENT PRIMARY KEY,
    GenreName VARCHAR(50) NOT NULL
);
CREATE TABLE IF NOT EXISTS Playlist(
    PlaylistID INTEGER AUTO_INCREMENT PRIMARY KEY,
    PlaylistName VARCHAR(50) NOT NULL,
    GenreID INTEGER NOT NULL,
    FOREIGN KEY (GenreID) REFERENCES Genre(GenreID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Songs(
    SongID INTEGER AUTO_INCREMENT PRIMARY KEY,
    ArtistID INTEGER NOT NULL,
    GenreID INTEGER NOT NULL,
    Title VARCHAR(50) NOT NULL,
    Length REAL NOT NULL,
    Plays INTEGER NOT NULL,
    CreatedAt datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (GenreID) REFERENCES Genre(GenreID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Producer(
    ProducerID INTEGER AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(50) NOT NULL
);
CREATE TABLE IF NOT EXISTS Message(
    MessageID INTEGER AUTO_INCREMENT PRIMARY KEY,
    ToUserID INTEGER NOT NULL,
    FromUserID INTEGER NOT NULL,
    Content VARCHAR(300) NOT NULL,
    FOREIGN KEY (ToUserID) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (FromUserID) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Community(
    CommunityID INTEGER AUTO_INCREMENT PRIMARY KEY,
    Com_Name VARCHAR(50) NOT NULL,
    GenreID INTEGER NOT NULL,
    Com_Desc VARCHAR(300) NOT NULL,
    FOREIGN KEY (GenreID) REFERENCES Genre(GenreID) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Friends(
    UserID1 INTEGER,
    UserID2 INTEGER,
    PRIMARY KEY(UserID1, UserID2),
    FOREIGN KEY (UserID1) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (UserID2) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS User_Community(
    UserID INTEGER,
    CommunityID INTEGER,
    PRIMARY KEY(UserID, CommunityID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (CommunityID) REFERENCES Community(CommunityID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Prod_Artist(
    ArtistID INTEGER,
    ProducerID INTEGER,
    PRIMARY KEY(ArtistID, ProducerID),
    FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (ProducerID) REFERENCES Producer(ProducerID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Producer_Credit(
    SongID INTEGER,
    ProducerID INTEGER,
    PRIMARY KEY(SongID, ProducerID),
    FOREIGN KEY (SongID) REFERENCES Songs(SongID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (ProducerID) REFERENCES Producer(ProducerID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Artist_Songs(
    ArtistID INTEGER,
    SongID INTEGER,
    Royalties REAL,
    PRIMARY KEY(ArtistID, SongID),
    FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (SongID) REFERENCES Songs(SongID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS User_Song(
    UserID INTEGER,
    SongID INTEGER,
    User_Plays INTEGER,
    PRIMARY KEY(UserID, SongID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (SongID) REFERENCES Songs(SongID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Curator_Playlist(
    CuratorID INTEGER,
    PlaylistID INTEGER,
    PRIMARY KEY(CuratorID, PlaylistID),
    FOREIGN KEY (CuratorID) REFERENCES Curator(CuratorID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (PlaylistID) REFERENCES Playlist(PlaylistID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS User_Downloads(
    UserID INTEGER,
    PlaylistID INTEGER,
    PRIMARY KEY(UserID, PlaylistID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (PlaylistID) REFERENCES Playlist(PlaylistID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Playlist_Songs(
    PlaylistID INTEGER,
    SongID INTEGER,
    PRIMARY KEY(PlaylistID, SongID),
    FOREIGN KEY (PlaylistID) REFERENCES Playlist(PlaylistID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (SongID) REFERENCES Songs(SongID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS User_Following(
    UserID INTEGER,
    ArtistID INTEGER,
    PRIMARY KEY(UserID, ArtistID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS UserCurator_Interact(
    UserID INTEGER,
    PostID INTEGER,
    Comments VARCHAR(150),
    Interactions BOOLEAN,
    PRIMARY KEY(UserID, PostID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE,
    FOREIGN KEY (PostID) REFERENCES Curator_Post(PostID) ON UPDATE RESTRICT ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS UserArtist_Interactions(
    UserID INTEGER,
    PostID INTEGER NOT NULL,
    Comments VARCHAR(150),
    Interactions BOOLEAN,
    PRIMARY KEY(UserID, PostID),
    CONSTRAINT fk01 FOREIGN KEY (UserID) REFERENCES Users(UserID) ON UPDATE RESTRICT ON DELETE CASCADE,
    CONSTRAINT fk02 FOREIGN KEY (PostID) REFERENCES Artist_Post(PostID) ON UPDATE RESTRICT ON DELETE CASCADE
);